{"version":3,"sources":["hooks/useInputState.js","TodoForm.js","hooks/useToggleState.js","EditTodoForm.js","Todo.js","TodoList.js","TodoApp.js","hooks/useTodoState.js","App.js","serviceWorker.js","index.js"],"names":["initialVal","useState","value","setValue","e","target","TodoForm","addTodo","useInputState","handleChange","reset","Paper","style","margin","padding","onSubmit","preventDefault","TextField","onChange","label","fullWidth","useToggle","initialValue","state","setState","toggle","EditTodoForm","id","task","updateTodo","toggleIsEditing","marginLeft","width","autoFocus","Todo","completed","removeTodo","toggleTodo","useToggleState","isEditing","ListItem","height","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","todos","props","length","List","map","todo","i","key","Divider","TodoApp","JSON","parse","window","localStorage","getItem","initialTodos","setTodos","newTodoText","uuidv4","todoId","updatedTodos","filter","updatedTask","useTodoState","useEffect","setItem","stringify","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f851b38.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport default (initialVal) => {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  return [value, handleChange, reset];\r\n};\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport useInputState from \"./hooks/useInputState\";\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n\r\n  return (\r\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          addTodo(value);\r\n          reset();\r\n        }}\r\n      >\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          margin=\"normal\"\r\n          label=\"Add New Todo\"\r\n          fullWidth\r\n        ></TextField>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import { useState } from \"react\";\r\n\r\nfunction useToggle(initialValue = false) {\r\n  const [state, setState] = useState(initialValue);\r\n\r\n  const toggle = () => {\r\n    setState(!state);\r\n  };\r\n\r\n  return [state, toggle];\r\n}\r\n\r\nexport default useToggle;\r\n","import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState\";\r\n\r\nfunction EditTodoForm({ id, task, updateTodo, toggleIsEditing }) {\r\n  const [value, handleChange, reset] = useInputState(task);\r\n\r\n  const handleUpdateTodo = (e) => {\r\n    e.preventDefault();\r\n\r\n    updateTodo(id, value);\r\n    toggleIsEditing();\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleUpdateTodo}\r\n      style={{ marginLeft: \"1rem\", width: \"50%\" }}\r\n    >\r\n      <TextField\r\n        margin=\"normal\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n        autoFocus\r\n      ></TextField>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default EditTodoForm;\r\n","import React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport EditTodoForm from \"./EditTodoForm\";\r\n\r\nfunction Todo({ task, completed, id, removeTodo, toggleTodo, updateTodo }) {\r\n  const [isEditing, toggleIsEditing] = useToggleState(false);\r\n\r\n  const handleRemoveTodo = () => {\r\n    removeTodo(id);\r\n  };\r\n\r\n  const handleToggleTodo = () => {\r\n    toggleTodo(id);\r\n  };\r\n\r\n  return (\r\n    <ListItem style={{ height: \"64px\" }}>\r\n      {isEditing ? (\r\n        <EditTodoForm\r\n          task={task}\r\n          id={id}\r\n          updateTodo={updateTodo}\r\n          toggleIsEditing={toggleIsEditing}\r\n        ></EditTodoForm>\r\n      ) : (\r\n        <>\r\n          <Checkbox\r\n            tabIndex=\"-1\"\r\n            checked={completed}\r\n            onClick={handleToggleTodo}\r\n          ></Checkbox>\r\n          <ListItemText\r\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\r\n          >\r\n            {task}\r\n          </ListItemText>\r\n\r\n          <ListItemSecondaryAction>\r\n            <IconButton aria-label=\"Delete\" onClick={handleRemoveTodo}>\r\n              <DeleteIcon></DeleteIcon>\r\n            </IconButton>\r\n\r\n            <IconButton aria-label=\"Edit\" onClick={toggleIsEditing}>\r\n              <EditIcon></EditIcon>\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </>\r\n      )}\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList({ todos = [], ...props }) {\r\n  if (todos.length) {\r\n    return (\r\n      <Paper>\r\n        <List>\r\n          {todos.map((todo, i) => (\r\n            <div key={todo.id}>\r\n              <Todo\r\n                id={todo.id}\r\n                task={todo.task}\r\n                completed={todo.completed}\r\n                removeTodo={props.removeTodo}\r\n                toggleTodo={props.toggleTodo}\r\n                updateTodo={props.updateTodo}\r\n              ></Todo>\r\n\r\n              {i < todos.length - 1 && <Divider></Divider>}\r\n            </div>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useEffect } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport TodoList from \"./TodoList\";\r\nimport useTodoState from \"./hooks/useTodoState\";\r\n\r\nfunction TodoApp() {\r\n  const initialTodos = JSON.parse(window.localStorage.getItem(\"todos\")) || \"[]\";\r\n\r\n  // initialTodos from localStorage is not used here because gh-pages won't have it\r\n  const { todos, addTodo, removeTodo, toggleTodo, updateTodo } = useTodoState(\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        padding: 0,\r\n        margin: 0,\r\n        height: \"100vh\",\r\n        backgroundColor: \"#fafafa\",\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\r\n        <Toolbar>\r\n          <Typography color=\"inherit\">Todos with hooks</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodoForm addTodo={addTodo}></TodoForm>\r\n\r\n          <TodoList\r\n            todos={todos}\r\n            removeTodo={removeTodo}\r\n            toggleTodo={toggleTodo}\r\n            updateTodo={updateTodo}\r\n          ></TodoList>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default TodoApp;\r\n","import { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport default (initialTodos) => {\r\n  const [todos, setTodos] = useState(initialTodos);\r\n\r\n  return {\r\n    todos,\r\n    addTodo: (newTodoText) => {\r\n      setTodos([\r\n        ...todos,\r\n        { id: uuidv4(), task: newTodoText, completed: false },\r\n      ]);\r\n    },\r\n    removeTodo: (todoId) => {\r\n      const updatedTodos = todos.filter((todo) => todo.id !== todoId);\r\n\r\n      setTodos(updatedTodos);\r\n    },\r\n    toggleTodo: (todoId) => {\r\n      const updatedTodos = todos.map((todo) =>\r\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n\r\n      setTodos(updatedTodos);\r\n    },\r\n    updateTodo: (todoId, updatedTask) => {\r\n      const updatedTodos = todos.map((todo) =>\r\n        todo.id === todoId ? { ...todo, task: updatedTask } : todo\r\n      );\r\n\r\n      setTodos(updatedTodos);\r\n    },\r\n  };\r\n};\r\n","import React from \"react\";\nimport TodoApp from \"./TodoApp\";\n\nfunction App() {\n  return <TodoApp></TodoApp>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}